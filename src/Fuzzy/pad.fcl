FUNCTION_BLOCK pad	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	dirty : REAL;
	amt : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	time : REAL;
END_VAR

FUZZIFY dirty
	TERM SD := (0,1) (50,0); 
	TERM MD := (0, 0) (50,1) (100,0);
	TERM LD := (50, 0) (100, 1);
END_FUZZIFY

FUZZIFY amt
	TERM SA := (0, 1) (50, 0);
	TERM MA := (0, 0) (50, 1) (100,0);
	TERM LA := (50, 0) (100, 1);
END_FUZZIFY

DEFUZZIFY time
	TERM VS := (0,1) (10,0);
	TERM S := (0,0) (15,1) (30,0);
	TERM M := (10,0) (30,1) (50,0);
	TERM L := (30,0) (45,1) (60,0);
	TERM VL := (50,0) (60,1);
	
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
	
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method
	
	RULE 1 : IF dirty IS SD AND amt IS SA THEN time IS VS;
	RULE 2 : IF dirty IS SD AND amt IS MA THEN time IS S;
	RULE 3 : IF dirty IS SD AND amt IS LA THEN time IS M;
	RULE 4 : IF dirty IS MD AND amt IS SA THEN time IS S;
	RULE 5 : IF dirty IS MD AND amt IS MA THEN time IS M;
	RULE 6 : IF dirty IS MD AND amt IS LA THEN time IS L;
	RULE 7 : IF dirty IS LD AND amt IS SA THEN time IS M;
	RULE 8 : IF dirty IS LD AND amt IS MA THEN time IS L;
	RULE 9 : IF dirty IS LD AND amt IS LA THEN time IS VL;
	
END_RULEBLOCK

END_FUNCTION_BLOCK

